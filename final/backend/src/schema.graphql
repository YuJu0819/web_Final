type Mutation {
  createAccount(account: String!, password: String!, name: String!): User
  signAccount(account: String!, password: String!): User
  selectCharacter(character: String!, account: String!): User!
  createRoom(id: String!, user: gameUser): Room
  addUserToRoom(roomID: String!, userAccount: String!): Room
  addRoomToUser(roomID: String!, userAccount: String!): User
  placeCard(roomID: String!, userNum:Int!, id:Int!, rotate:Int!, pos:[Int]): Room
}

type Query {
  user(account: String!): User
  cards(character: String!): [Int!]
  skill(character: String!): String!
  room(id: String!): Room
  card(id: Int!): [Int!]
  player(roomID: String!): Room
}

type createType {
  detect: String!
}

type Character {
  id: String!
  cards: [Int]
  skill: String
}

type Subscription {
  gaming(p1: String!, p2: String): Room!
  usersInRoom(roomId: String!): Boolean!
  RoomUpdate(roomId: String!): Room!
}

type User {
  account: String!
  password: String!
  name: String!
  winlose: [Boolean]
  character: String
  roomnumber: String
}

input gameUser {
  account: String
  character: String
  handcard: [Int]
  score: Int
}

type gamePlayer {
  account: String
  character: String
  handcard: [Int]
  score: Int
  used: usedcard
}

type Room {
  id: String!
  turn: Int
  map: [rows]
  timer: Int
  users: [gamePlayer]
}

type rows {
  row: [Int]
}

type usedcard {
  cardid: Int
  rotate: Int
  position: [Int]
}
